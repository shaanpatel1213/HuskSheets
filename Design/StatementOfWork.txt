Team Members:
Brandon Petersen, Emily Fink, Jaden McMiller, Shaan Patel, Shubham Yadav

Statement of Work:

We will be developing Husksheets, a distributive collaborative spreadsheet application that allows users to store and modify data in an intuitive environment. To protect spreadsheet data and server security, users will be required to login before viewing/editing their sheets. At the most basic level, users will have access to spreadsheet functionality such as creating, opening, editing, saving, and sharing documents. Within the spreadsheet, data will be stored in ‘cells’ which are labeled rows (by numerical value 1,2,3, etc..) and columns (labeled alphabetically A,B,C,etc…). Basic arithmetic operations such as addition, subtraction, and multiplication will be able to be performed between cells containing numerical values. Users would be able to call some premade function such as IF Function allowing for a condition to be checked, SUM function to be able to sum up a series of numbers, MIN and MAX functions to find the minimum or maximum values of a series of numbers, AVG to find the average of the series of numbers, CONCAT to combine a series of numbers or string to be joint right next to each other, DEBUG, printing the literal of the string disregarding any character meaning. 


MVP:
Login for users (password security through database hashing and signup screen)

User Story:
As a user, I want to be able to login to my personal account, so I can securely access my spreadsheets

Acceptance Criteria:
	-User should be prompted with a login page with text fields to enter username and password
	-After entered credentials are matched to an existing account, user can see any existing spreadsheets related to the account


Multiple users can edit the sheet

User Story:
As a user, I want to be able to add collaborators to my spreadsheet, so multiple users can collaborate

Acceptance Criteria:
	-User has an option to add a collaborator by username
	-User has view spreadsheets they have access to collaborate, can select a 	      spreadsheet, and can implement savable changes


Server side persistence

User Story:
As a user, I want my changes to be saved on a server, so I can save my progress and have the latest version available to me.

Acceptance Criteria:
	-User can select to save, pushing their changes to the server.
	-A visual confirmation is provided, confirming the sheet was saved
	-When opening a sheet, the latest saved version is displayed


Basic spreadsheet functionalities (open, edit, create, delete, etc)

User Story:
As a user, I want to be able to create, open, edit, and delete spreadsheets, to manage my data.

Acceptance Criteria:
	-Users can open any sheet they have read/write access to. The selected sheet is displayed and edits can be made if write access is present.
	-New sheet can be opened, closing any sheet currently open. This new sheet is blank with no collaborators.
	-Users can select to delete a sheet they created. The data for the sheet is cleared from server


Support for Formulas(+, - , *, / , <, >, =, <>, &, |, :)  and Functions: IF, SUM, MIN, MAX, AVG, CONCAT, DEBUG

User Story:
As a user, I want to execute formulas with arithmetic operations and functions to compute data.

Acceptance Criteria:
	-Users can apply arithmetic formulas and predefined functions within cells. After changes to cells with formulas are entered, the result is displayed


Desirables:
Additional cell formatting (font size, alignment, etc)
User Story:
As a user, I want to be able to change the formatting of the cells within a spreadsheet.
	
Acceptance Criteria:
-Users with edit permissions can change the font size, color, style, and alignment of text within cells of a spreadsheet.
-Formatting changes should be saved and remain after opening/closing the spreadsheet.

Additional range on sharing/permission levels among users

User Story:
As a user, I want to be able to add collaborators to my spreadsheet with set permissions, so I can choose who can edit my spreadsheet

Acceptance Criteria:
	-Users allowing other user(s) to collaborate can set permissions (read only/edit). These 	permissions are made evident to respective collaborators
	-Users with read only access cannot edit the sheet

Version history




Bonus:
Add functionality for graphs
Chat/Comment Functionality (Advanced collaboration)
Being able to see who else is on the sheet either viewing or edit
Search 
CheckBoxes
Download the sheet, Open a Sheet, 
Sort
Real-time co-authoring
Non-Functional Requirements:
Performance
Response time under X seconds
Scalability
Support up to X publishers and X simultaneous users
